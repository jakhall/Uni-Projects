
package aurora.remote;

import java.util.ArrayList;
import aurora.model.Document;
import aurora.model.HomeModel;
import aurora.model.Profile;
import aurora.model.Session;
import aurora.network.Request;
import aurora.network.Response;

/**
 * 
 * DocList Invoker - Handles tasks requested by the clients DocList view.
 *
 */

public class DocListInvoker extends BaseInvoker {
		
		private HomeModel theModel;
		private Profile viewedUser = null;
		
		//Stores the session, the viewed user and creates a new detail model.
		
		public DocListInvoker(Session s, Profile user) {
			super(s);
			theSession = s;
			viewedUser = user;
			theModel = new HomeModel(s);	
		}
		
		//Stores the session and creates a new detail model.
		
		public DocListInvoker(Session s) {
			super(s);
			theSession = s;
			theModel = new HomeModel(s);	
		}
		
		
		public ArrayList<Document> getDocuments() {
			if(viewedUser == null) {
				return theModel.getDocList(theSession.getUser());
			} else {
				return theModel.getDocList(viewedUser);
			}
		}
		

		
		public void viewObserver(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObservers()[index];
				theModel.addUserLinks(profile);
				ProfileInvoker pc = new ProfileInvoker(theSession, profile);
			}
		}
		
		
		
		public void viewObserving(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObserving()[index];
				theModel.addUserLinks(profile);
				ProfileInvoker pc = new ProfileInvoker(theSession, profile);

			}
		}

		public int getNumOfObservers() {
			return theModel.getObservers().length;
		}
		
		public int getNumOfObserving() {
			return theModel.getObserving().length;
		}
		
		
		public void manageObserving() {
				ManageInvoker invoker = new ManageInvoker(theSession);
				invoker.setPreviousInvoker(this);
				theSession.getSocket().setInvoker(invoker);
		}
		
		public boolean isViewedUser() {
			if(viewedUser != null) {
				return true;
			} else {
				return false;
			}
		}
		
		public void removeDocument(int id) {
			theModel.removeDocument(id);
		}
		
		public void addDocument() {
			theModel.addUserDocument();
		}
		
		
		public void viewDocument(int id) {
			Document doc = theModel.getDocument(id);
			theModel.addAuthor(doc);
			DocumentInvoker invoker = new DocumentInvoker(theSession, doc, isViewedUser());
			invoker.setPreviousInvoker(this);
			theSession.getSocket().setInvoker(invoker);
		}
		
		
		public Response handleRequest(Request request) {
			
			Response response = super.handleRequest(request);
			int index = request.getMethod();
			
			
			switch(index) {
			
			case 3 : response = new Response(getDocuments());
					 break;
			case 4 : addDocument();
					 break;
			case 5 : manageObserving();
					 response.setSwitch(true);
					 break;
			case 6 : viewDocument(request.getValue());
					 break;
			case 7 : response.setSwitch(isViewedUser());
			 		 break;
			case 8 : removeDocument(request.getValue());
					 break;
	
			}
			
			return response;
		}
		
		
}