package aurora.remote;

import java.awt.Image;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.util.Random;
import javax.imageio.ImageIO;
import aurora.model.Profile;
import aurora.model.RegisterModel;
import aurora.network.Request;
import aurora.network.Response;
import aurora.network.SocketController;
import aurora.view.HomePanel;

/**
 * 
 * Register Invoker - Handles tasks requested by the clients register view.
 *
 */

public class RegisterInvoker extends BaseInvoker {

		private RegisterModel theModel;
		private int resultNumber;
		private Profile newUser;
		private Image profileImage;
		private SocketController theSocket;
		
		
		//Stores the database connection, creates a new user object and register model.
		//allocates the new users default icon colour.
		
		public RegisterInvoker(Connection conn, SocketController socket) {
			super(socket);
			theModel = new RegisterModel(conn);	
			newUser = new Profile();
			newUser.setDefaultColor(randomColor());
			theSocket = socket;
		}
		
		
		//createUser - sets the users username and password. 
		public void createUser(String username, String password) {
			newUser.setUsername(username);
			newUser.setPassword(password);
		}
		
		public void setDetails(String t, int a, String f, String l, String e) {
			newUser.setDetails(t, a, f, l);
			newUser.setEmail(e);
		}
		
		public void createUser(Profile u) {
			newUser.setUsername(u.getUsername());
			newUser.setPassword(u.getPassword());
			newUser.setEmail(u.getEmail());
			newUser.setDetails(u.getTitle(), u.getAge(), u.getFirstName(), u.getLastName());
		}
		
		public void addProfileIcon(Image image) {	
			String s = File.separator;
			String url = System.getenv("APPDATA") + s + "Aurora" + s + "profile_data"
						 + s + newUser.getUsername() + s + "profile" + s + "icon.png";
			try {
				ImageIO.write((RenderedImage)image, "png", new File(url));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		public void setImage(Image img) {
			profileImage = img;
		}
		
		private String randomColor() {
			String[] colors = {"blue", "red", "green", "yellow", "magenta", "orange"};
			Random rand = new Random();
			int index = rand.nextInt((5 - 0) + 1) + 0;
			return colors[index];
		}
		
		public String getIconColor() {
			return newUser.getDefaultColor();
		}
		
		
		public boolean validatePassword(String pass, String confirm) {
			if((!pass.equals("")) && (pass.equals(confirm))) {
				return true;
			}
			
			System.out.println("Password Invalid");
			
			return false;
		}
		
		
		public byte[] getDefaultImage() {
			
			String url = "/default_data/profile_image/default_" + newUser.getDefaultColor() + ".png";
			File imageFile = new File(HomePanel.class.getResource(url).getFile());
			
			try {
				return Files.readAllBytes(imageFile.toPath());
			} catch (IOException e) {
				return null;
			}
		}
		
		
		public void register(Image image) {
			
				Profile registeredUser = theModel.registerUser(newUser);
				
				if(image != null) {
					addProfileIcon(image);
				}
				
				theSession = theModel.createSession(registeredUser);
				theSession.setSocket(theSocket);
				HomeInvoker invoker = new HomeInvoker(theSession);
				invoker.setPreviousInvoker(this.previousInvoker);
				theSession.getSocket().setInvoker(invoker);
				
				
		}
		
		
		private Image byteArraytoImage(byte[] bytes) {
			
			Image image = null;
			
			if(bytes != null) {
				try {
					image = ImageIO.read(new ByteArrayInputStream(bytes));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			return image;
		}
		
		
		public Response handleRequest(Request request) {
			
			Response response = super.handleRequest(request);
			int index = request.getMethod();
			
			switch(index) {
			
			case 3 : Profile user = (Profile) request.getObject();
					 createUser(user);
					 break;
			case 4 : response = new Response(getDefaultImage());
					 break;
			case 5 : byte[] bytes = (byte[]) request.getObject();
					register(byteArraytoImage(bytes));
					break;
				}
			
			return response;
		}
		
		
}