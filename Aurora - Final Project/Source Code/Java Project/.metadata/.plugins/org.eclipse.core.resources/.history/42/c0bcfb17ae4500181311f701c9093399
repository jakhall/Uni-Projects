package aurora.retrieval;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import aurora.model.Document;
import aurora.model.FrequencyAssigner;
import aurora.model.Term;
import aurora.model.TextSplitter;
import aurora.model.TextWord;
import aurora.model.Word;
import aurora.model.WordStemmer;

public class VectorSpaceModel {
	
	
	private Connection conn;
	private Statement stmt;
	private ArrayList<Term> terms = new ArrayList<Term>();
	
	TextSplitter splitter = new TextSplitter();
	FrequencyAssigner assigner = new FrequencyAssigner();
	WordStemmer stemmer = new WordStemmer();
	
	public VectorSpaceModel(Connection c){
			conn = c;
			try {
				stmt = conn.createStatement();
			} catch (SQLException e) {
				System.out.println(conn);
				e.printStackTrace();
			}
			
			updateTerms();
		}
	
	
	public int count;
	
	public ResultSet queryDatabase(String sql) {
		
		ResultSet rs = null;
		
		
	
		
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		return rs;
	}
	
	public boolean updateDatabase(String sql) {
		long a = System.currentTimeMillis();
		
		try {
			stmt.executeUpdate(sql);
			long b = System.currentTimeMillis();
			count++;
			System.out.println(sql + " : took " +(b-a)+"mil to execute. ("+((b-a)/1000)+" seconds)");
			System.out.println(("Total updates: " + count));
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
		
	}
	
	
	
	public void removeDocument(Document doc) {
		ArrayList<Word> words = splitter.splitText(doc.getText());
		ArrayList<TextWord> textWords = assigner.initiate(words);
		int index;
		for(TextWord oldTerm : textWords) {
			index = Collections.binarySearch(terms, oldTerm);
			if(index >= 0){
				removeFromDocVector(terms.get(index).getId(), doc.getID());
			}
			
		}
		updateTerms();
	}
	
	
	private void removeFromDocVector(int termId, int docId) {	
		
		deleteFromVSM("BINARY_VSM", termId, docId);
		deleteFromVSM("COUNT_VSM", termId, docId);
		deleteFromVSM("WEIGHT_VSM", termId, docId);
		
		if(getDocFrequency(termId) <= 0) {
			removeTerm(termId);
		}
		
	}
	
	private void deleteFromVSM(String vsm, int termId, int docId) {
		String sql = "DELETE FROM " + vsm + " WHERE TermID=" + termId + " AND DocumentID=" +  docId;
		updateDatabase(sql);
	}
		
	
	private void removeTerm(int termId) {
		String sql = "DELETE FROM TERM_Table WHERE TermID=" + termId;
		updateDatabase(sql);
	}
	
	
	
	
	
	private void updateTerms(){
		terms = new ArrayList<Term>();
		String sql = "SELECT * FROM TERM_Table ORDER BY Term";
		ResultSet rs = queryDatabase(sql);
		try {
			while(rs.next()) {
				terms.add(new Term(rs.getString(2), rs.getInt(1)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void newDocument(Document doc){
		
		ArrayList<Word> words = splitter.splitText(doc.getText());
		ArrayList<TextWord> textWords = assigner.initiate(words);
		
		String sql = "UPDATE DOCUMENT_Table SET WordCount=" + textWords.size() + " WHERE DocumentID=" + doc.getID();
		updateDatabase(sql);
		
		checkTerms(textWords, doc);
		
	}
	
	
	private void checkTerms(ArrayList<TextWord> newTerms, Document doc) {
		
		int index;
		
		for(TextWord n : newTerms) {
			index = Collections.binarySearch(terms, n);
			if(index >= 0) {
				addToTermAxis(terms.get(index).getString(), n, doc);
			} else {
				int termId = addNewTerm(index, n);
				updateDocVector(doc.getID(), termId, n);
			}
			
		}
		
	}
	
	
	private int addNewTerm(int index, TextWord n) {
		
		String sql = "INSERT INTO TERM_Table (Term) VALUES ('" + n.getWord() + "')";
		updateDatabase(sql);
		sql = "SELECT TermID FROM TERM_Table WHERE Term='" + n.getWord() + "'";
		ResultSet rs = queryDatabase(sql);
		
		int id = 0;
		try {
			while(rs.next()) {
				id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		terms.add(-(index+1), new Term(n.getWord(), id ));
		
		return id;
	}
	
	
	
	private void updateDocVector(int docId, int termId, TextWord newTerm){
		String sql = "INSERT INTO BINARY_VSM (TermID, DocumentID, Value) VALUES (" + termId + ", " + docId + ", 1)";
		updateDatabase(sql);
		sql = "INSERT INTO COUNT_VSM (TermID, DocumentID, Value) VALUES (" + termId + ", " + docId + ", " + newTerm.getTextFrequency() + ")";
		updateDatabase(sql);
		sql = "INSERT INTO WEIGHT_VSM (TermID, DocumentID, Value) VALUES (" + termId + ", " + docId + ", " + calculateTFIDF(termId, docId) + ")";
		updateDatabase(sql);
	}
	
	
	
	private void addToTermAxis(String term, TextWord n, Document doc){
		int termId = getTermId(term);
		String sql = "INSERT INTO BINARY_VSM (TermID, DocumentID, Value) VALUES (" + termId + ", " + doc.getID() + ", 1)";
		updateDatabase(sql);
		sql = "INSERT INTO COUNT_VSM (TermID, DocumentID, Value) VALUES (" + termId + ", " + doc.getID() + ", " + n.getTextFrequency() + ")";
		updateDatabase(sql);
		ArrayList<Integer> documents = getRelatedDocs(termId);
		for(int docId : documents) {
			double TFIDF = calculateTFIDF(termId, docId);
			sql = "UPDATE WEIGHT_VSM SET Value=" + TFIDF + "WHERE TermID=" + termId + " AND DocumentID=" + docId;
		}
		
	}
	
	
	private int getDocWordCount(int id) {
		String sql = "SELECT WordCount FROM DOCUMENT_Table WHERE DocumentID=" + id;
		ResultSet rs = queryDatabase(sql);
		int count = 0;
		try {
			while(rs.next()) {
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	private ArrayList<Integer> getRelatedDocs(int term){
		String sql = "SELECT DocumentID FROM BINARY_VSM WHERE TermID=" + term;
		ResultSet rs = queryDatabase(sql);
		ArrayList<Integer> docs = new ArrayList<Integer>();
		try {
			while(rs.next()) {
				docs.add(rs.getInt(1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return docs;
		
	}
	

	private int getTermId(String term) {
		String sql = "SELECT TermID FROM TERM_Table WHERE Term='" + term + "'";
		ResultSet rs = queryDatabase(sql);
		int id = -1;
		try {
			while(rs.next()) {
					id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return id;
		
	}
	
	public int getNumberOfDocs(){
		String sql = "SELECT COUNT(DocumentID) FROM DOCUMENT_Table";
		ResultSet rs = queryDatabase(sql);
		int total = 0;
		
		try {
			rs.next();
			total = rs.getInt(1);
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return total;
	}
	
	public int getTermFrequency(int termId, int documentId) {
		String sql = "SELECT VALUE FROM COUNT_VSM WHERE TermID=" + termId + " AND DocumentID=" + documentId;
		ResultSet rs = queryDatabase(sql);
		int frequency = 0;
			try {
				while(rs.next()) {
					frequency = rs.getInt(1);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return frequency;
	}
	
	
	public int getDocFrequency(int termId) {
		String sql = "SELECT COUNT(DocumentID) FROM BINARY_VSM WHERE TermID =" + termId;
		ResultSet rs = queryDatabase(sql);
		int frequency = 0;
			try {
				while(rs.next()) {
					frequency = rs.getInt(1);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return frequency;
	}
	
	public double calculateTFIDF(int termId, int documentId) {
		
		int totalDocuments = getNumberOfDocs();
		double termFrequency = getTermFrequency(termId, documentId);
		int documentFrequency = getDocFrequency(termId);
		int totalDocumentTerms = getDocWordCount(documentId);
				
		double TFIDF = (termFrequency/totalDocumentTerms)*(Math.log(totalDocuments/(1 + documentFrequency)));
			
				
		return TFIDF;

	}
	
	

}
