
package aurora.remote;

import java.util.ArrayList;
import aurora.model.HomeModel;
import aurora.model.Profile;
import aurora.model.Session;
import aurora.network.Request;
import aurora.network.Response;

/**
 * 
 * Observe Invoker - Handles tasks requested by the clients observe view.
 *
 */

public class ObserveInvoker extends BaseInvoker {
		
		private HomeModel theModel;
		private Profile viewedUser = null;
		
		//Stores the session, the user being viewed and creates a new home model.
		
		public ObserveInvoker(Session s, Profile user) {
			super(s);
			theSession = s;
			viewedUser = user;
			theModel = new HomeModel(s);	
		}
		
		//Stores the session and creates a new home model.
		public ObserveInvoker(Session s) {
			super(s);
			theSession = s;
			theModel = new HomeModel(s);	
		}
		
		
		public ArrayList<Profile> getObservers() {
			if(viewedUser == null) {
				return theModel.getObserverList();
			} else {
				return theModel.getViewedObservers(viewedUser);
			}
		}
		
		public ArrayList<Profile> getObserving() {
			if(viewedUser == null) {
				return theModel.getObservingList();
			} else {
				return theModel.getViewedObserving(viewedUser);
			}
		}
		

		
		public void viewObserver(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObservers()[index];
				theModel.addUserLinks(profile);
				ProfileInvoker pc = new ProfileInvoker(theSession, profile);
			}
		}
		
		
		public void viewUser(int id) {
			Profile user = theModel.getUser(id);
			theModel.addUserLinks(user);
			ProfileInvoker invoker = new ProfileInvoker(theSession, user);
			invoker.setPreviousInvoker(this);
			theSession.getSocket().setInvoker(invoker);
		}
		
		
		public void viewObserving(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObserving()[index];
				theModel.addUserLinks(profile);
				ProfileInvoker pc = new ProfileInvoker(theSession, profile);

			}
		}

		public int getNumOfObservers() {
			return theModel.getObservers().length;
		}
		
		public int getNumOfObserving() {
			return theModel.getObserving().length;
		}
		
		
		public void manageObserving() {
				ManageInvoker invoker = new ManageInvoker(theSession);
				invoker.setPreviousInvoker(this);
				theSession.getSocket().setInvoker(invoker);
		}
		
		public boolean isViewedUser() {
			if(viewedUser != null) {
				return true;
			} else {
				return false;
			}
		}
		
		
		
		public Response handleRequest(Request request) {
			
			Response response = super.handleRequest(request);
			int index = request.getMethod();
			
			
			switch(index) {
			
			case 3 : response = new Response(getObservers());
					 break;
			case 4 : response = new Response(getObserving());
					 break;
			case 5 : manageObserving();
					 response.setSwitch(true);
					 break;
			case 6 : viewUser(request.getValue());
					 break;
			case 7 : response.setSwitch(isViewedUser());
			 		 break;
	
			}
			
			return response;
		}
		
		
}
