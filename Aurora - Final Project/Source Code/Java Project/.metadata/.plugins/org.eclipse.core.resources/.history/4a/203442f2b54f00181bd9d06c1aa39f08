
package aurora.controller;

import aurora.model.Document;
import aurora.model.HomeModel;
import aurora.model.Profile;
import aurora.model.Session;
import aurora.view.BasePanel;
import aurora.view.DetailPanel;
import aurora.view.ManagePanel;
import aurora.view.ProfilePanel;
import aurora.view.UserDocumentPanel;

/**
 * Home controller - controls the document view where users can view 
 * a selected document.
 * 
 */

public class HomeController extends BaseController {
		
		private HomeModel theModel;
		
		public HomeController(Session s) {
			theSession = s;
			theModel = new HomeModel(s);	
		}
	
		public HomeModel getModel() {
			return (HomeModel) theModel;
		}

		public String[] getUserDocsTitle() {
			Document[] docArr = theModel.getUserDocuments();
			String[] strArr = new String[docArr.length];
			for(int i = 0; i < docArr.length; i++) {
				strArr[i] = docArr[i].getTitle();
			}
			return strArr;
		}
		
		
		public String[] getObserversUsername() {
			Profile[] profArr = theModel.getObservers();
			String[] strArr = new String[profArr.length];
			for(int i = 0; i < profArr.length; i++) {
				strArr[i] = profArr[i].getUsername();
			}
			return strArr;
		}
		
		public String[] getObservingUsername() {
			Profile[] profArr = theModel.getObserving();
			String[] strArr = new String[profArr.length];
			for(int i = 0; i < profArr.length; i++) {
				strArr[i] = profArr[i].getUsername();
			}
			return strArr;
		}
		
		public int getNumOfDocuments() {
			return theModel.getUserDocuments().length;
		}
		
		public int getNumOfObservers() {
			return theModel.getObservers().length;
		}
		
		public int getNumOfObserving() {
			return theModel.getObserving().length;
		}
		
	
		
		public void removeDocument(int index) {
			Document doc = theModel.getUserDocuments()[index];
			theModel.removeDocument(doc);
		}
		public void addDocument() {
			theModel.addUserDocument();
		}
		
		public void viewDocument(int index) {
			Document doc = theModel.getUserDocuments()[index];
			theModel.addAuthor(doc);
			DocumentController dc = new DocumentController(theSession, doc);
			dc.setPreviousPanel((BasePanel) theFrame.getContentPane());
			dc.setFrame(theFrame);
			UserDocumentPanel dp = new UserDocumentPanel(dc);
			theFrame.setContentPane(dp);
			theFrame.pack();
		}
		
		public void viewObserver(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObservers()[index];
				theModel.addUserLinks(profile);
				ProfileController pc = new ProfileController(theSession, profile);
				pc.setPreviousPanel((BasePanel) theFrame.getContentPane());
				pc.setFrame(theFrame);
				ProfilePanel pp = new ProfilePanel(pc);
				theFrame.setContentPane(pp);
				theFrame.pack();
			}
		}
		
		public void viewObserving(int index) {
			if(index >= 0) {
				Profile profile = theModel.getObserving()[index];
				theModel.addUserLinks(profile);
				ProfileController pc = new ProfileController(theSession, profile);
				pc.setPreviousPanel((BasePanel) theFrame.getContentPane());
				pc.setFrame(theFrame);
				ProfilePanel pp = new ProfilePanel(pc);
				theFrame.setContentPane(pp);
				theFrame.pack();
			}
		}
		
		public void manageObserving() {
				ManageController mc = new ManageController(theSession);
				mc.setPreviousPanel((BasePanel) theFrame.getContentPane());
				mc.setFrame(theFrame);
				ManagePanel mp = new ManagePanel(mc);
				theFrame.setContentPane(mp);
				theFrame.pack();
		}
		
		public void editDetails() {
			DetailController dc = new DetailController(theSession);
			dc.setPreviousPanel((BasePanel) theFrame.getContentPane());
			dc.setFrame(theFrame);
			DetailPanel dp = new DetailPanel(dc);
			theFrame.setContentPane(dp);
			theFrame.pack();
		}
	
		
}


