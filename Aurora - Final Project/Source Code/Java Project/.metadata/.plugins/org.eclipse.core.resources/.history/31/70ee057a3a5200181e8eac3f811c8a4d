package aurora.remote;

import aurora.model.Document;
import aurora.model.DocumentModel;
import aurora.model.Profile;
import aurora.model.Session;
import aurora.network.Request;
import aurora.network.Response;

/**
 * 
 * Document Invoker - Handles tasks requested by the clients document view.
 *
 */

public class DocumentInvoker extends BaseInvoker {

		private DocumentModel theModel;
		private Document theDocument;
		private boolean isViewed = false;
	
		//Stores the session and the inputed document to be viewed. Creates a new document model. 
		
		public DocumentInvoker(Session s, Document d) {
			super(s);
			theSession = s;
			theDocument = d;
			theModel = new DocumentModel(s);	
		}
		
		//Stores the session and the inputed document to be viewed. 
		//Checks if the viewed user is equal to the active user.
		
		public DocumentInvoker(Session s, Document d, boolean v) {
			super(s);
			theSession = s;
			theDocument = d;
			theModel = new DocumentModel(s);	
			if(v && !d.getText().equals("")) {
				theModel.viewDocument(d);
			}
			isViewed = v;
		}
		
		public Session getSession() {
			return theSession;
		}
		
		
		//updateDocument - refreshes the document object if the database has changed.
		
		public void updateDocument() {
			theDocument = theModel.updateDocument(theDocument);
		}
		
		//getDocument - returns the document stored in the class, 
		//adds the author to the document.
		
		public Document getDocument() {
			theModel.addAuthor(theDocument);
			return theDocument;
		}
		
		//setDocument - sets the document for this class.
		
		public void setDocument(Document doc) {
			theDocument = doc;
		}
		
		
		//saveDocument - saves any changes to the document to the database. 
		public void saveDocument(String title, String text) {
			theDocument.setText(text);
			theDocument.setTitle(title);
			theModel.saveDocument(theDocument);
			updateDocument();
		}
		
		//saveDocument - saves any changes to the document to the database. 
		public void saveDocument(Document doc) {
			doc.setID(theDocument.getID());
			theModel.saveDocument(doc);
			updateDocument();
		}
		
		//viewUser - changes the active invoker to the profile invoker of the selected user. 
		
		public void viewUser(int id) {
			
			BaseInvoker invoker;
			
			if(id == theSession.getUser().getUserID()) {
				invoker = new HomeInvoker(theSession);
			} else {
				Profile user = theModel.getUser(id);
				theModel.addUserLinks(user);
				invoker = new ProfileInvoker(theSession, user);
			}
			invoker.setPreviousInvoker(this);
			theSession.getSocket().setInvoker(invoker);
		}
		
		//isViewed - returns whether the document being viewed is not created by the active user.
		
		public boolean isViewed() {
			return isViewed;
		}
		
		
		public int getActiveUserID(){
			return theSession.getUser().getUserID();
		}
		
		//handleRequest - Dictates what method should be called for each incoming request, 
		//returns the corresponding response.
		
		
		public Response handleRequest(Request request) {
			
			Response response = super.handleRequest(request);
			int index = request.getMethod();
			
			switch(index) {
			
			case 3 : response = new Response(getDocument());
					 break;
			case 4 : Document doc = (Document)request.getObject();
					 saveDocument(doc);
					 break;
			case 5 : response.setSwitch(isViewed());;
			 		 break;
			case 6 : viewUser(request.getValue());
					 break;
			case 7 :response.setValue(getActiveUserID());;
					break;
			}
			
			return response;
		}
		
		
}
