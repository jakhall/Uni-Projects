package aurora.model;

import java.util.ArrayList;

/**
 * 
 * Profile Model - The model for the profile views of the system, interacts with the 
 * database and vector space model.
 *
 */

public class ProfileModel extends BaseModel {
	
	ProfileDatabase profileDB;
	
	Document[] documents = null;
	Profile[] observers = null;
	Profile[] observing = null;
	
	
	
	//Stores the session object, gets the database connection.
	
	public ProfileModel(Session s){
		theSession = s;
		profileDB = new ProfileDatabase(s.getConnection());
	
	}
	
	//getUserDocuments - returns an array of documents which are created by the active user.
	
	public Document[] getUserDocuments(Profile user) {
		
		if(documents == null) {
			ArrayList<Document> docList = user.getDocuments();
			Document[] docArr = new Document[docList.size()];
			
			for(int i = 0; i < docArr.length; i++) {
				docArr[i] = docList.get(i);
			}
			
			documents = docArr;
		}

		return documents;
	}
	
	//getObservers - returns all profiles that are observing the active user as an array.
	
	public Profile[] getObservers(Profile user) {
		
		user.setObservers(profileDB.getObservers(user));
		
		Profile[] profArr = new Profile[user.getObservers().size()];
		
		for(int i = 0; i < profArr.length; i++) {
			profArr[i] = user.getObservers().get(i);
		}
		
		return profArr;
	}
	
	
	//getObserving - returns all profiles the active user is observing as an array.
	
	
	public Profile[] getObserving(Profile user) {
	
		user.setObservingList(profileDB.getObserving(user));
		
		Profile[] profArr = new Profile[user.getObservingList().size()];
		
		for(int i = 0; i < profArr.length; i++) {
			profArr[i] = user.getObservingList().get(i);
		}
		
		return profArr;
	}
	
	
	//getObserving - returns all profiles that the active user is observing as a list.
	
	public ArrayList<Profile> getObserving() {
		
		Profile user = theSession.getUser();
	
		user.setObservingList(profileDB.getObserving(user));
			
		return user.getObservingList();
	}
	
	//removeObserving - Deletes the connection between the active user and the selected user they are observing.
	
	public void removeObserving(Profile user) {
		int observerId = theSession.getUser().getUserID();
		int userId = user.getUserID();
		String sql = "DELETE FROM OBSERVER_Table WHERE ObserverID=" + observerId + " AND UserID=" + userId;
		profileDB.updateDatabase(sql);
	}
	
	//removeObserving - adds a connection between the active user and the selected user they want to observe.
	
	public void addObserving(Profile user) {
		int observerId = theSession.getUser().getUserID();
		int userId = user.getUserID();
		String sql = "INSERT INTO OBSERVER_Table (ObserverID, UserID) VALUES (" + observerId + ", " + userId + ")";
		profileDB.updateDatabase(sql);
	}
	
	
	//addUserLinks - gets all users associated with the input user, 
	//adds them to the profile object.
	public void addUserLinks(Profile u) {
		profileDB.addUserLinks(u);
	}
	
	
	//addAuthor - 	Retrieves the author for a specific document,
	//adds it to the document object.

	public void addAuthor(Document doc) {
		doc.setAuthor(profileDB.getAuthor(doc));
	}
	
}
