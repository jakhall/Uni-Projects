package aurora.retrieval;

import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import aurora.model.Document;
import aurora.model.Profile;

/**
 * 
 * ProfileInserter - Updates the Profile vector whenever the user adds/removes or views a document.
 *
 */



public class ProfileInserter extends VSMUpdater {
	
	ArrayList<String> userUpdates = new ArrayList<String>();
	ArrayList<String> userInserts = new ArrayList<String>();
	
	public ProfileInserter(Statement statement) {
		super(statement);
	}
	
	
	
	//Add - Adds the document terms to the profile vector.
	
	public void add(Document doc, Profile user) {
		ArrayList<Word> words = splitter.splitText(doc.getText());
		ArrayList<TextWord> textWords = assigner.initiate(words);
		ArrayList<Term> userTerms = getUserTerms(user.getUserID());
		
		updateProfile(doc, user, textWords, userTerms);
		
		batchProfileInsert();
		batchProfileUpdate();
		
	}
	
	//Add - Adds the viewed document terms to the profile vector.
	public void view(Document doc, Profile user) {
		ArrayList<Word> words = splitter.splitText(doc.getText());
		ArrayList<TextWord> textWords = assigner.initiate(words);
		ArrayList<Term> userTerms = getUserTerms(user.getUserID());
		
		updateProfile(doc, user, textWords, userTerms);
		
		batchProfileInsert();
		batchProfileUpdate();
		
	}
	
	public void updateProfile(Document d, Profile u, ArrayList<TextWord> w, ArrayList<Term> t) {
		ArrayList<TextWord> newWords = findNew(w, t);
		ArrayList<TextWord> similar = findSimilar(w, t);
		ArrayList<Term> oldTerms = findOld(w, t);

		addWords(d.getID(), u.getUserID(), newWords);
		updateSimilarWords(d.getID(), u.getUserID(), similar);
		updateOldTerms(d.getID(), u.getUserID(), oldTerms);

	}

	public void updateViewProfile(Document d, Profile u, ArrayList<TextWord> w, ArrayList<Term> t) {
		ArrayList<TextWord> newWords = findNew(w, t);
		ArrayList<TextWord> similar = findSimilar(w, t);
		ArrayList<Term> oldTerms = findOld(w, t);

		addWords(d.getID(), u.getUserID(), newWords);
		updateSimilarWords(d.getID(), u.getUserID(), similar);
		updateOldTerms(d.getID(), u.getUserID(), oldTerms);

	}
	
	
	public void addWords(int docId, int userId, ArrayList<TextWord> words) {
		for(TextWord word : words) {
			int termId = getTermId(word.getWord());
			double tfidf = calculateTFIDF(termId, docId, word.getTextFrequency(), 0);
			userInserts.add("(" + termId + ", " + userId + ", " + tfidf + ")");
		}
	}
	
	public void updateSimilarWords(int docId, int userId, ArrayList<TextWord> words) {
		for(TextWord word : words) {
			int termId = getTermId(word.getWord());
			double tfidf = getUserTFIDF(termId, userId);
			tfidf = tfidf + tfidf*0.2;
			userUpdates.add("(" + termId + ", " + userId +  ", " + tfidf + ")");
		}
	}
	
	
	public void updateOldTerms(int docId, int userId, ArrayList<Term> terms) {
		for(Term term : terms) {
			double tfidf = getUserTFIDF(term.getId(), userId) - 0.05;
			if(tfidf <= 0) {
				String sql = "DELETE FROM PROFILE_Table WHERE TermID=" + term.getId() + " AND UserID=" + userId;
				updateDatabase(sql);
			} else {
				userUpdates.add("(" + term.getId() + ", " + userId + ", " + tfidf + ")");
			}
		}
	}
	
	
	public ArrayList<TextWord> findNew(ArrayList<TextWord> w, ArrayList<Term> t) {
		int index;
		ArrayList<TextWord> newWords = new ArrayList<TextWord>();
		
		for(TextWord word : w) {
			index = Collections.binarySearch(t, word);
			if(index < 0) {
				newWords.add(word);
			}
		}
		return newWords;
	}
	
	
	public ArrayList<Term> findOld(ArrayList<TextWord> w, ArrayList<Term> t) {
		int index;
		ArrayList<Term> oldTerms = new ArrayList<Term>();
		for(Term term : t) {
			index = Collections.binarySearch(w, term.getString());
			if(index < 0) {
				oldTerms.add(term);
			}
		}
		return oldTerms;
	}
	
	public ArrayList<TextWord> findSimilar(ArrayList<TextWord> w, ArrayList<Term> t) {
		int index;
		ArrayList<TextWord> similar = new ArrayList<TextWord>();
		for(TextWord word : w) {
			index = Collections.binarySearch(t, word);
			if(index >= 0) {
				similar.add(word);
			}
		}
		return similar;
	}
	
	
	
	public void batchProfileUpdate() {
		if(userUpdates.size() > 0) {
		String sql = "INSERT INTO PROFILE_Temp VALUES ";
		for(int i = 0; i < userUpdates.size() - 1; i++) {
			sql = sql + userUpdates.get(i) + ", ";
		}
		sql = sql + userUpdates.get(userUpdates.size() - 1);
		updateDatabase(sql);
		
	
		 sql = "UPDATE PROFILE_Table SET TFIDF = (SELECT TFIDF from PROFILE_Temp WHERE TermID = PROFILE_Table.TermID AND UserID = PROFILE_Table.UserID) WHERE Exists (SELECT TermID From PROFILE_Temp WHERE TermID = PROFILE_Table.TermID AND UserID = PROFILE_Table.UserID)";
		  updateDatabase(sql);
		  sql = "DELETE FROM PROFILE_Temp";
		  updateDatabase(sql);
		  userUpdates = new ArrayList<String>();
		}
	}
	
	
	public void batchProfileInsert() {
		if(userInserts.size() > 0) {
			String sql = "INSERT INTO PROFILE_Table VALUES ";
			for(int i = 0; i < userInserts.size() - 1; i++) {
				sql = sql + userInserts.get(i) + ", ";
			}
			sql = sql + userInserts.get(userInserts.size() - 1);
			updateDatabase(sql);
		}
		
		userInserts = new ArrayList<String>();
		
	}
	
	

	
	

}
