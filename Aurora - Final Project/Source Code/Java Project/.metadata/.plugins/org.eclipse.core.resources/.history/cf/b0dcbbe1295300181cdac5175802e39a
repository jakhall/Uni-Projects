package aurora.model;

import java.awt.Image;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.imageio.ImageIO;

/**
 * 
 * Detail Model - The model for the detail views of the system, interacts with the 
 * database and vector space model.
 *
 */

public class DetailModel extends BaseModel {
	

	ProfileDatabase profileDB;
	
	//Stores the session object, gets the database connection.
	
	public DetailModel(Session s) {
		theSession = s;
		profileDB = new ProfileDatabase(s.getConnection());
	}

	public ProfileDatabase getProfileDatabase() {
		return profileDB;
	}

	
	//updateUser - Saves changes to a profile record where the users id's match.
	
	public void updateUser(Profile user) {
		String sql = "UPDATE USER_Table SET Password='" + user.getPassword() + "', DOB=" + user.getDOB() + ", FirstName='" + user.getFirstName()
					 + "', Title='" + user.getTitle() + "', Email='" + user.getEmail() +  "', LastName='" + user.getLastName() + "' WHERE UserID=" + theSession.getUser().getUserID();
		profileDB.updateDatabase(sql);
		setProfileImage(user);
	}
	
	
	//setProfileImage - gets the folder specific to the users profile, saves the image stored in the user object.
	//updates the image location for the users database record. 
	
	public void setProfileImage(Profile user) {	
		String s = File.separator;
		String location = s + theSession.getUser().getUsername() + s + "profile" + s + "icon.png";
		String url = System.getenv("APPDATA") + s + "Aurora" + s + "profile_data" + location;
		Image image = byteArraytoImage(user.getImage());
		try {
			ImageIO.write((RenderedImage)image, "png", new File(url));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	    String sql = "UPDATE USER_Table SET ImageLocation='" + location + "' WHERE UserID=" + theSession.getUser().getUserID();
	    profileDB.updateDatabase(sql);
	}
	
	
	//byteArraytoImage - converts a byte array stored in user object to an image object.
	
	private Image byteArraytoImage(byte[] bytes) {
		Image image = null;
		try {
			image = ImageIO.read(new ByteArrayInputStream(bytes));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return image;
	}
	
	
	
	
	
}