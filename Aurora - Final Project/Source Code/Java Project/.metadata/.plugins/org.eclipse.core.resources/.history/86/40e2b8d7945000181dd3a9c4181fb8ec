package aurora.remote;

import java.util.ArrayList;
import aurora.model.Document;
import aurora.model.ManageModel;
import aurora.model.Profile;
import aurora.model.Session;
import aurora.network.Request;
import aurora.network.Response;

/**
 * 
 * Manage Invoker - Handles tasks requested by the clients manage view.
 *
 */

public class ManageInvoker extends BaseInvoker {

		private ManageModel theModel;
		private Document theDocument;
		private int observerNum;
	
		//Stores the session object and creates a new manage model.
		
		public ManageInvoker(Session s) {
			super(s);
			theSession = s;
			theModel = new ManageModel(s);	
		}
		
		public Session getSession() {
			return theSession;
		}
	
		//deleteUser - Deletes the link between the active user observing the selected user.
		
		public void deleteUser(int id) {
			Profile user = theModel.getUser(id);
			theModel.removeObserving(user);
		}
		
		
		
		//getObserving - returns an array of all profiles the active user it observing.
		
		public Profile[] getObserving() {
			return theModel.getObserving();
		}
		
		
		//getUsers - returns a list of all profiles the active user it observing.
		
		public ArrayList<Profile> getUsers(){
			return theModel.getUsers();
		}
		
		//viewUser - changes the active invoker to the profile invoker for the selected user.
		
		public void viewUser(int id) {
			Profile user = theModel.getUser(id);
			theModel.addUserLinks(user);
			ProfileInvoker invoker = new ProfileInvoker(theSession, user);
			invoker.setPreviousInvoker(this);
			theSession.getSocket().setInvoker(invoker);
		}
		
		//getNumOfObservers - returns the total number of observers for the active user.
		
		public int getNumOfObservers() {
			return observerNum;
		}
		
		
		//handleRequest - Dictates what method should be called for each incoming request, 
		//returns the corresponding response.
		
		
		public Response handleRequest(Request request) {
			
			Response response = super.handleRequest(request);
			int index = request.getMethod();
			
			switch(index) {
			
			case 3 : response = new Response(getUsers());
					 break;
			case 4 : deleteUser(request.getValue());
					 break;
			case 6 : viewUser(request.getValue());
					break;
			}

			return response;
		}
		
}
