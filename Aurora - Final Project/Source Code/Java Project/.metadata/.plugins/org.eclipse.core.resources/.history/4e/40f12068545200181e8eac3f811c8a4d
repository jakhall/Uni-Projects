package aurora.model;

import java.awt.Image;
import java.awt.image.RenderedImage;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import aurora.retrieval.VectorSpaceModel;

/**
 * 
 * Document Model - The model for the document views of the system, interacts with the 
 * database and vector space model.
 *
 */

public class DocumentModel extends BaseModel {
	
	private ProfileDatabase profileDB;
	
	
	//Stores the session object, gets the database connection.
	public DocumentModel(Session s) {
		theSession = s;
		profileDB = new ProfileDatabase(s.getConnection());
	}
	
	public Session getSession() {
		return theSession;
	}
	
	public void setSession(Session s) {
		this.theSession = s;
	}
	
	
	//saveDocument - Updates a document record and VSM within the database with any changes
	//gets todays date and sets it as the LastUpdated value.
	
	public void saveDocument(Document doc) {
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		Date date = new Date();
		VectorSpaceModel vsm = theSession.getSocket().getVSM();
		vsm.updateDocument(doc);
		vsm.addUserDocument(doc, theSession.getUser());
		String sql = "UPDATE DOCUMENT_Table SET AuthorID=" + theSession.getUser().getUserID() + ", " + " Title='" + doc.getTitle() + "', " +  " LastUpdated='" + dateFormat.format(date) + "'" + " WHERE DocumentID=" + doc.getID();                    
		profileDB.updateDatabase(sql);
		setDocumentText(doc);
		setDocumentImage(doc);
	}
	
	
	//viewDocument - Tells the VSM a user has viewed a specific document.
	
	public void viewDocument(Document doc) {
		VectorSpaceModel vsm = theSession.getSocket().getVSM();
		vsm.viewDocument(doc, theSession.getUser());
	}
	
	
	public boolean checkViewed(Document doc) {
		String sql = "SELECT * FROM HISTORY_Table WHERE UserID=" + theSession.getUser().getUserID() + " AND DocumentID=" + doc.getID();
		ResultSet rs = profileDB.queryDatabase(sql);
		boolean check = false;
		try {
			while(rs.next()) {
				check = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return check;
	}
	
	
	//addAuthor - 	Retrieves the author for a specific document,
	//adds it to the document object.
	
	public void addAuthor(Document doc) {
		doc.setAuthor(profileDB.getAuthor(doc));
	} 
	
	
	//getUser - gets the user with the specified id if one exists.
	
	public Profile getUser(int id) {
		return profileDB.getUser(id);
	}
	
	//addUserLinks - gets all users associated with the input user, 
	//adds them to the profile object.
	
	public Profile addUserLinks(Profile user) {
		return profileDB.addUserLinks(user);
	}
	
	//setDocumentText - gets the document folder for the active user, saves the document text of the input document to that location
	//updates the TextLocation for that document record within the database.
	public void setDocumentText(Document doc) {	
		String s = File.separator;
		String location = s + theSession.getUser().getUsername() + s + "docs" + s + "text" + s + doc.getID() + ".txt";
		String url = System.getenv("APPDATA") + s + "Aurora" + s + "profile_data" + location;
	
		BufferedWriter writer;
		
		    try {
		    	writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(url), "utf-8"));
				writer.write(doc.getText());
				writer.flush();
				writer.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		    
		    String sql = "UPDATE DOCUMENT_Table SET TextLocation='" + location + "' WHERE DocumentID=" + doc.getID();
		    profileDB.updateDatabase(sql);
	}
	
	//setDocumentImage - gets the document folder for the active user, saves the document image of the input document to that location
	//updates the ImageLocation for that document record within the database.
	
	public void setDocumentImage(Document doc) {	
		String s = File.separator;
		String location = s + theSession.getUser().getUsername() + s + "docs" + s + "image" + s + doc.getID() + ".png";
		String url = System.getenv("APPDATA") + s + "Aurora" + s + "profile_data" + location;
		Image image = byteArraytoImage(doc.getImage());
		try {
			ImageIO.write((RenderedImage)image, "png", new File(url));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	    String sql = "UPDATE DOCUMENT_Table SET ImageLocation='" + location + "' WHERE DocumentID=" + doc.getID();
	    profileDB.updateDatabase(sql);
	}
	
	//byteArraytoImage - converts a byte array stored in user object to an image object.
	
	private Image byteArraytoImage(byte[] bytes) {
		Image image = null;
		try {
			image = ImageIO.read(new ByteArrayInputStream(bytes));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return image;
	}
	
	//getDocumentText - Retrieves the text of a specific document using the documents TextLocation.
	
	public String getDocumentText(Document doc){
		String s = File.separator;
		TextParser parser = new TextParser();
		String url = System.getenv("APPDATA") + s + "Aurora" + s + "profile_data" + doc.getTextLocation();
		String text = "";
		try {
			text = parser.read(url);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return text;
	}
	
	//updateDocument - Refreshes a document object if their are changes to the database.
	
	public Document updateDocument(Document doc){
		
		return profileDB.getDocument(doc.getID());
	}
	
	
}
