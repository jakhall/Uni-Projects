package aurora.retrieval;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


/**
 * 
 * VSMQuery - Forms the VSM Vector objects.
 *
 */


public class VSMQuery extends VSMUpdater {
	
	//Stores the statement object.
	
	public VSMQuery(Statement statement) {
		super(statement);
	}
	  
	
	//Calculate - takes a string query and converts it into a vector object using the VSM.
	
	public double[] calculate(String query){
		
		int index;
		ArrayList<Term> allTerms = getAllTerms();
		double[] weights = new double[allTerms.size()];
		
		if(query.equals("")) {
			for(int i = 0; i < allTerms.size(); i++) {
				weights[i] = 0.5;
			}
		}
		ArrayList<Word> splitWords = splitter.splitText(query);
		ArrayList<TextWord> textWords = assigner.initiate(splitWords);
		int total = textWords.size();
		
		
		Comparator<Word> c = new Comparator<Word>() {
		    public int compare(Word a, Word b) {
		        return a.getWord().compareTo(b.getWord());
		    };
		};
		
	    Collections.sort(textWords, c);
		
		
		
		for(int i = 0; i < allTerms.size(); i++) {
			index = Collections.binarySearch(textWords, allTerms.get(i).getString());
			if(index >= 0) {
				weights[i] = calculateQueryWeight(allTerms.get(i).getId(), textWords.get(index).getTextFrequency(), 1, total);
			} else {
				weights[i] = 0;
			}
		}
		
		return weights;
		
	}
	
	//calculateQueryWeight - Uses the VSM and the terms in the query to calculate the weights of the vector.
	
	private double calculateQueryWeight(int termId, double termFreq, int docChange, int totalWords){
		
		int totalDocuments = getNumberOfDocs();
		double termFrequency = termFreq;
		int documentFrequency = getDocFrequency(termId) + docChange;
		int totalDocumentTerms = totalWords;
		double TFIDF = (termFrequency/totalDocumentTerms)*(Math.log(totalDocuments/(1 + documentFrequency)));
		if(TFIDF >= 0 && TFIDF <= 200 ) {
			TFIDF = BigDecimal.valueOf(TFIDF).setScale(4, RoundingMode.HALF_UP).doubleValue();
		} else {
			TFIDF = 0;
		}
		return TFIDF;

	}
	
	//getDocumentVector - Retrieves the document vector from the VSM_Table
	//fills missing terms with a weight of 0.
	
	public double[] getDocumentVector(int docId) {
		ArrayList<Term> allTerms = getAllTerms();
		ArrayList<Term> docTerms = getDocTerms(docId);
		double[] vector = new double[allTerms.size()];
		Comparator<Term> c = new Comparator<Term>() {
		    public int compare(Term a, Term b) {
		        return a.getString().compareTo(b.getString());
		    };
		};
		
		int index;
		for(int i = 0; i < allTerms.size(); i++) {
			index = Collections.binarySearch(docTerms, allTerms.get(i), c);
			if(index >= 0) {
				vector[i] = getTFIDF(docTerms.get(index).getId(), docId);
			} else {
				vector[i] = 0;
			}
		}
		 
		return vector;
	}
	
	
	
	//getProfileVector - Retrieves the profile vector from the PROFILE_Table
	//fills missing terms with a weight of 0.
	
	public double[] getProfileVector(int userId) {
		ArrayList<Term> allTerms = getAllTerms();
		ArrayList<Term> userTerms = getUserTerms(userId);
		double[] vector = new double[allTerms.size()];
		
		Comparator<Term> c = new Comparator<Term>() {
		    public int compare(Term a, Term b) {
		        return a.getString().compareTo(b.getString());
		    };
		};
		
		Collections.sort(userTerms, c);
		
		int index;
		for(int i = 0; i < allTerms.size(); i++) {
			index = Collections.binarySearch(userTerms, allTerms.get(i), c);
			if(index >= 0) {
				vector[i] = getUserTFIDF(userTerms.get(index).getId(), userId);
			} else {
				vector[i] = 0;
			}
		}
		return vector;
		
	}


}
