package aurora.model;

import java.util.ArrayList;

/**
 * 
 * Manage Model - The model for the manage views of the system, interacts with the 
 * database and vector space model.
 *
 */


public class ManageModel extends BaseModel {
	

	ProfileDatabase profileDB;
	Document[] documents = null;
	Profile[] observers = null;
	Profile[] observing = null;
	
	//Stores the session object, gets the database connection.
	
	public ManageModel(Session s) {
		theSession = s;
		profileDB = new ProfileDatabase(s.getConnection());
	}

	public ProfileDatabase getProfileDatabase() {
		return profileDB;
	}

	//removeObserver - deletes the connection between the active user and the selected user.
	
	public void removeObserver(Profile user) {
		int userId = theSession.getUser().getUserID();
		int observerId = user.getUserID();
		String sql = "DELETE FROM OBSERVER_Table WHERE ObserverID=" + observerId + " AND UserID=" + userId;
		profileDB.updateDatabase(sql);
	}
	
	
	public void removeObserving(Profile user) {
		int observerId = theSession.getUser().getUserID();
		int userId = user.getUserID();
		String sql = "DELETE FROM OBSERVER_Table WHERE ObserverID=" + observerId + " AND UserID=" + userId;
		profileDB.updateDatabase(sql);
	}
	
	public Profile getUser(int id) {
		return profileDB.getUser(id);
	}
	
	public void removeDocument(Document doc) {
		profileDB.removeDocument(doc.getID());
	}
	
	
	public Document[] getDocuments() {
		
		Profile user = theSession.getUser();
		
		user.setDocuments(profileDB.getUserDocuments(user));
		
		Document[] profArr = new Document[user.getDocuments().size()];
		
		for(int i = 0; i < profArr.length; i++) {
			profArr[i] = user.getDocuments().get(i);
		}
		
		return profArr;
	}

	
	public Profile[] getObservers() {
		
		Profile user = theSession.getUser();
		
		user.setObservers(profileDB.getObservers(user));
		
		Profile[] profArr = new Profile[user.getObservers().size()];
		
		for(int i = 0; i < profArr.length; i++) {
			profArr[i] = user.getObservers().get(i);
		}
		
		return profArr;
	}

	
	public Profile[] getObserving() {
		
		Profile user = theSession.getUser();
	
		user.setObservingList(profileDB.getObserving(user));
		
		
		Profile[] profArr = new Profile[user.getObservingList().size()];
		
		for(int i = 0; i < profArr.length; i++) {
			profArr[i] = user.getObservingList().get(i);
		}
		
		return profArr;
	}
	
	public ArrayList<Profile> getUsers() {
		
		Profile user = theSession.getUser();
	
		user.setObservingList(profileDB.getObserving(user));
		
		return user.getObservingList();
		
	}
	
	public Profile addUserLinks(Profile user) {
		return profileDB.addUserLinks(user);
	}
	
	public void addAuthor(Document doc) {
		doc.setAuthor(profileDB.getAuthor(doc));
	}
	

}