package aurora.retrieval;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/**
 * 
 * VSMUpdate - Defines the basic functionality of all updater objects.
 *
 */

public class VSMUpdater {
	
	protected Statement stmt;
	protected TextSplitter splitter = new TextSplitter();
	protected FrequencyAssigner assigner = new FrequencyAssigner();
	
	
	//Stores the statement object.
	
	public VSMUpdater(Statement statement) {
		stmt = statement;
	}

	//queryDatabase - Retrieve the result set from the database response to an SQL statement.
	
	protected ResultSet queryDatabase(String sql) {
		
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return rs;
	}
	
	
	//updateDatabase - Updates the database with the specified SQL statement.
	
	protected boolean updateDatabase(String sql) {
		try {
			stmt.executeUpdate(sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	//getAllTerms - returns all terms from the TERM_Table.
	
	protected ArrayList<Term> getAllTerms() {
		ArrayList<Term> allTerms = new ArrayList<Term>();
		
		String sql = "SELECT * FROM TERM_Table ORDER BY Term";
		ResultSet rs = queryDatabase(sql);
		try {
			while(rs.next()) {
				allTerms.add(new Term(rs.getString(2), rs.getInt(1)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allTerms;
	}
	
	//getMaxTermId - gets the highest term id from the TERM_Table.
	
	protected int getMaxTermId() {
		String sql = "SELECT Max(TermID) FROM TERM_Table";
		ResultSet rs = queryDatabase(sql);
		int max = 0;
		try {
			while(rs.next()) {
				max = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return max;
	}
	
	//getDocTerms - Retrieves all terms from the VSM_Table affiliated with the specified document.
	
	protected ArrayList<Term> getDocTerms(int docId) {
		
		Comparator<Term> c = new Comparator<Term>() {
		    public int compare(Term a, Term b) {
		        return a.getString().compareTo(b.getString());
		    };
		};
		
		ArrayList<Term> docTerms = new ArrayList<Term>();
		ArrayList<Integer> ids = new ArrayList<Integer>();
		
		String sql = "SELECT * FROM VSM_Table WHERE DocumentID=" + docId;
		ResultSet rs = queryDatabase(sql);
		try {
			while(rs.next()) {
				ids.add(rs.getInt(1));
			}
			for(Integer id : ids) {
				docTerms.add(getTerm(id));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		Collections.sort(docTerms, c);
		
		return docTerms;
	}
	
	
	//getTerm - retrieves a term from the specified term id if one exists.
	
	protected Term getTerm(int termId) {
		String sql = "Select * FROM TERM_Table WHERE termId=" + termId;
		ResultSet rs = queryDatabase(sql);
		Term term = null;
		try {
			while(rs.next()) {
				term = new Term(rs.getString(2), rs.getInt(1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return term;
	}
	
	//getTermId - Gets the term id of a term from the TERM_Table if one exists.
	
	protected int getTermId(String term) {
		String sql = "SELECT TermID FROM TERM_Table WHERE Term='" + term + "'";
		ResultSet rs = queryDatabase(sql);
		int id = -1;
		try {
			while(rs.next()) {
					id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return id;
		
	}

	//getTermFrequency - Retrieves the term frequency of a vector term.
	
	protected int getTermFrequency(int termId, int docId) {
		String sql = "SELECT TF FROM VSM_Table WHERE TermID=" + termId + " AND DocumentID=" + docId;
		ResultSet rs = queryDatabase(sql);
		int freq = 0;
		
		try {
			freq = rs.getInt(1);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return freq;
		
	}
	
	//getDocFrequency - Returns the total amount of times the term appears in the VSM_Table.
	
	protected int getDocFrequency(int termId) {
		String sql = "SELECT Count(*) FROM VSM_Table WHERE TermID=" + termId;
		ResultSet rs = queryDatabase(sql);
		int freq = 0;
		try {
			freq = rs.getInt(1);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return freq;
	}
	
	//getRelatedDocs - returns the id of all documents which are affiliated with a given term.
	
	protected ArrayList<Integer> getRelatedDocs(int term){
		String sql = "SELECT DocumentID FROM VSM_Table WHERE TermID=" + term;
		ResultSet rs = queryDatabase(sql);
		ArrayList<Integer> docs = new ArrayList<Integer>();
		try {
			while(rs.next()) {
				docs.add(rs.getInt(1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return docs;
		
	}
	
	//getUserTerms - returns all terms affiliated with a given profile.
	
	protected ArrayList<Term> getUserTerms(int userId){
		ArrayList<Integer> ids = new ArrayList<Integer>();
		ArrayList<Term> terms = new ArrayList<Term>();
		String sql = "SELECT TermID FROM PROFILE_Table Where UserID=" + userId;
		ResultSet rs = queryDatabase(sql);
		try {
			while(rs.next()) {
				ids.add(rs.getInt(1));
			}
			for(int id : ids) {
				terms.add(getTerm(id));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return terms;
	}
	
	//calculateTFIDF - calculate the TFIDF value of a given term.
	
	public double calculateTFIDF(int termId, int documentId, double termFreq, int docChange) {
		
		int totalDocuments = getNumberOfDocs();
		double termFrequency = termFreq;
		int documentFrequency = getDocFrequency(termId) + docChange;
		int totalDocumentTerms = getDocWordCount(documentId);
		
		double TFIDF = (termFrequency/totalDocumentTerms)*(Math.log(totalDocuments/(1 + documentFrequency)));
		
		if(TFIDF >= 0 && TFIDF <= 5 ) {
			TFIDF = BigDecimal.valueOf(TFIDF).setScale(4, RoundingMode.HALF_UP).doubleValue();
		} else {
			TFIDF = 0;
		}
		return TFIDF;

	}
	
	
	//getTFIDF - retrieves the TFIDF value of a given term vector from the VSM_Table. 
	
	protected double getTFIDF(int termId, int docId) {
		String sql = "SELECT TFIDF FROM VSM_Table WHERE TermID=" + termId + " AND DocumentID=" + docId;
		ResultSet rs = queryDatabase(sql);
		double tfidf = 0;
		try {
			while(rs.next()) {
				tfidf = rs.getDouble(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return tfidf;
	}
	
	//getUserTFIDF - retrieves the TFIDF value of a given term vector from the PROFILE_Table. 
	protected double getUserTFIDF(int termId, int userId){
		String sql = "SELECT TFIDF FROM PROFILE_Table WHERE TermID=" + termId + " AND UserID=" + userId;
		ResultSet rs = queryDatabase(sql);
		double tfidf = 0;
		
		try {
			while(rs.next()) {
			tfidf = rs.getDouble(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return tfidf;
	}
	
	
	//getNumberOfDocs - returns the total number of documents in the DOCUMENT_Table
	
	protected int getNumberOfDocs(){
		String sql = "SELECT COUNT(DocumentID) FROM DOCUMENT_Table";
		ResultSet rs = queryDatabase(sql);
		int total = 0;
		
		try {
			rs.next();
			total = rs.getInt(1);
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return total;
	}
	
	
	//getDocWordCount - returns the number of terms in a given document.
	protected int getDocWordCount(int id) {
		String sql = "SELECT WordCount FROM DOCUMENT_Table WHERE DocumentID=" + id;
		ResultSet rs = queryDatabase(sql);
		int count = 0;
		try {
			while(rs.next()) {
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	


}
