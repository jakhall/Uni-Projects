package aurora.controller;

import java.util.ArrayList;
import aurora.model.Document;
import aurora.model.Profile;
import aurora.model.ProfileModel;
import aurora.model.Session;
import aurora.view.BasePanel;
import aurora.view.DocumentPanel;
import aurora.view.ProfilePanel;


/**
 * 
 * Profile Controller - controls the profile view, allows the user to view a selected user.
 * 
 */

public class ProfileController extends BaseController {
	
	private ProfileModel theModel;
	private Profile viewedUser;
	
	
	//Stores the session and the user being viewed, creates a new profile model. 
	
	public ProfileController(Session s, Profile u) {
		viewedUser = u;
		theSession = s;
		theModel = new ProfileModel(s);
	}
	
	
	//getUserDocuments - returns a list of all documents created by the user being viewed.
	
	public Document[] getUserDocuments() {
		return theModel.getUserDocuments(viewedUser);
	}
	
	
	//getViewedUser - returns the profile object associated with the user being viewed.
	
	public Profile getViewedUser() {
		return viewedUser;
	}
	
	
	
	//isObserving - checks if the active user is current observing the user being viewed. 
	
	public boolean isObserving() {
			ArrayList<Profile> observing = theModel.getObserving();
			
			for(Profile user : observing) {
				if(user.getUserID() == viewedUser.getUserID()) {
					return true;
				} 
			}
			
			return false;
		}
	
	
	
	//getUserDocsTitle - returns a list of document titles that were created by the user being viewed.
	
	public String[] getUserDocsTitle() {
		Document[] docArr = theModel.getUserDocuments(viewedUser);
		String[] strArr = new String[docArr.length];
		for(int i = 0; i < docArr.length; i++) {
			strArr[i] = docArr[i].getTitle();
		}
		return strArr;
	}
	
	//getObserversUsername - returns a list of username's of profiles that are observing the viewed user.
	
	public String[] getObserversUsername() {
		Profile[] profArr = theModel.getObservers(viewedUser);
		String[] strArr = new String[profArr.length];
		for(int i = 0; i < profArr.length; i++) {
			strArr[i] = profArr[i].getUsername();
		}
		return strArr;
	}
	
	public String[] getObservingUsername() {
		Profile[] profArr = theModel.getObserving(viewedUser);
		String[] strArr = new String[profArr.length];
		for(int i = 0; i < profArr.length; i++) {
			strArr[i] = profArr[i].getUsername();
		}
		return strArr;
	}

	public int getNumOfDocuments() {
		return theModel.getUserDocuments(viewedUser).length;
	}
	
	public int getNumOfObservers() {
		return theModel.getObservers(viewedUser).length;
	}
	
	public int getNumOfObserving() {
		return theModel.getObserving(viewedUser).length;
	}
	
	
	public void viewDocument(int index) {
		Document doc = theModel.getUserDocuments(viewedUser)[index];
		theModel.addAuthor(doc);
		DocumentController dc = new DocumentController(theSession, doc);
		dc.setPreviousPanel((BasePanel) theFrame.getContentPane());
		dc.setFrame(theFrame);
		DocumentPanel dp = new DocumentPanel(dc);
		theFrame.setContentPane(dp);
		theFrame.pack();
	}
	
	public void viewObserver(int index) {
		if(index >= 0) {
			Profile profile = theModel.getObservers(viewedUser)[index];
			theModel.addUserLinks(profile);
			ProfileController pc = new ProfileController(theSession, profile);
			pc.setPreviousPanel((BasePanel) theFrame.getContentPane());
			pc.setFrame(theFrame);
			ProfilePanel pp = new ProfilePanel(pc);
			theFrame.setContentPane(pp);
			theFrame.pack();
		}
	}
	
	public void viewObserving(int index) {
		if(index >= 0) {
			Profile profile = theModel.getObserving(viewedUser)[index];
			theModel.addUserLinks(profile);
			ProfileController pc = new ProfileController(theSession, profile);
			pc.setPreviousPanel((BasePanel) theFrame.getContentPane());
			pc.setFrame(theFrame);
			ProfilePanel pp = new ProfilePanel(pc);
			theFrame.setContentPane(pp);
			theFrame.pack();
		}
	}
	
	public void removeObserving() {
		theModel.removeObserving(viewedUser);
	}
	
	public void addObserving() {
		theModel.addObserving(viewedUser);
	}
	
	public String getIconColor() {
		return viewedUser.getDefaultColor();
	}
	
	public String getViewedUsername() {
		return viewedUser.getUsername();
	}
	
}
