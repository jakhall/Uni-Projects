import java.util.ArrayList;

public class CosineSimilarity {
	
	private double dotProduct;
	private double vector1Norm;
	private double vector2Norm;
	private double similarity;
	
	private Vector vector1;
	private Vector vector2;
	
	public double equate(Document d, Query q){
		
		vector1 = createVector(q.getWordList());
		vector2 = createVector(extract(d.getWordList(), q.getWordList()));
		
		
		/**
		System.out.println("Vector1");
		for(DocumentWord word : vector1.getTerms()){
			System.out.println(word.getWord() + " " + word.getTFIDF());
		}
		
		System.out.println("Vector2");
		for(DocumentWord word : vector2.getTerms()){
			System.out.println(word.getWord() + " " + word.getTFIDF());
		}
		
		**/
		
		
		dotProduct = vector1.dotProduct(vector2);
		vector1Norm = vector1.norm();
		vector2Norm = vector2.norm();

		similarity =  dotProduct/(vector1Norm*vector2Norm);
		
		return similarity;
		
	}
	
	
	public double equate(Document d, Document d2){
		
		vector1 = createVector(d2.getWordList());
		vector2 = createVector(d.getWordList());
		
		
		System.out.println(vector1.getTerms().get(0).getWord());
		dotProduct = vector1.dotProduct(vector2);
		vector1Norm = vector1.norm();
		vector2Norm = vector2.norm();

		similarity =  dotProduct/(vector1Norm*vector2Norm);
		
		return similarity;
		
	}
	
	private ArrayList<DocumentWord> extract(ArrayList<DocumentWord> d, ArrayList<DocumentWord> q){
		ArrayList<DocumentWord> newList = new ArrayList<DocumentWord>();
		DocumentWord newWord;
		boolean present;
		for(DocumentWord queryWord: q){
			present = false;
			for(DocumentWord documentWord: d){
				if(documentWord.getWord().equals(queryWord.getWord())){
					newList.add(documentWord);
					present = true;
				}
			}
			
			if(!present){
				newWord = queryWord;
				newWord.setTFIDF(0);
				newList.add(newWord);
			}
		}
		return newList;
	}
	
	
	private Vector createVector(ArrayList<DocumentWord> l){
		Vector vector = new Vector();
		for(int i = 0; i < l.size(); i++){
			vector.addTerm(l.get(i));
		}
		return vector;
	}
	
	
	public double getVector1Norm(){
		return vector1Norm;
	}
	
	public double getVector2Norm(){
		return vector2Norm;
	}
	
	public double getDotProduct(){
		return dotProduct;
	}
	
	public double getSimilarity(){
		return similarity;
	}
	
	

}
