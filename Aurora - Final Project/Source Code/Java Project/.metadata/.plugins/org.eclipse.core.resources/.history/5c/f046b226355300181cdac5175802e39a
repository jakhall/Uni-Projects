package aurora.controller;

import java.util.ArrayList;

import aurora.model.Document;
import aurora.model.Profile;
import aurora.model.SearchModel;
import aurora.model.Session;
import aurora.view.BasePanel;
import aurora.view.HomePanel;
import aurora.view.ProfilePanel;
import aurora.view.SearchPanel;
import aurora.view.UserDocumentPanel;

/**
 * 
 * Search Controller - controls the search view, allows a new user to view results from
 * an inputed query.
 * 
 */

public class SearchController extends BaseController {

		private SearchModel theModel;
		private String theQuery;
		private int observerNum;
		private int resultNumber;
		private ArrayList<Profile> userList;
		private ArrayList<Document> docList;
		private boolean isProfile;
		
		
		//Stores the session and the input query, creates a new search model.
		
		public SearchController(Session s, String query) {
			theSession = s;
			theQuery = query;
			theModel = new SearchModel(s);	
		}
		
		public Session getSession() {
			return theSession;
		}
		
		
		//getResultsUsername - returns a list of username's of profiles associated with the query.
		
		public String[] getResultsUsername() {
			userList = theModel.getUserResults(theQuery);
			resultNumber = userList.size();
			String[] strArr = new String[resultNumber];
			for(int i = 0; i < resultNumber; i++) {
				strArr[i] = userList.get(i).getUsername();
			}
			return strArr;
		}
		
		
		public String[] getResultDocuments() {
			docList = theModel.getDocumentResults(theQuery, 0, 15);
			String[] docArr = new String[docList.size()];
			for(int i = 0; i < docList.size(); i++) {
				docArr[i] = docList.get(i).getTitle();
			}
				return docArr;
		}
		
		
		//getResultNumber - returns the total number of results.
		
		public int getResultNumber() {
			return resultNumber;
		}
		

		//viewDocument - gets the document at the document list index, assigns the author of that document,
		//creates a new document controller with the selected document, then adds the controller and panel to the 
		//active content pane. 
		
		public void viewDocument(int index) {
			Document doc = docList.get(index);
			theModel.addAuthor(doc);
			DocumentController dc = new DocumentController(theSession, doc, !isAuthor(doc));
			dc.setPreviousPanel((BasePanel) theFrame.getContentPane());
			dc.setFrame(theFrame);
			UserDocumentPanel dp = new UserDocumentPanel(dc);
			theFrame.setContentPane(dp);
			theFrame.pack();
		}
		
		
		//viewUser - gets the user at a given index in the result list and opens their profile view by 
		//creating a new profile controller and panel.
		
		
		public void viewUser(int index) {
			if(index >= 0) {
				
				BaseController controller;
				BasePanel panel;
				
				Profile user = userList.get(index)
				if(user.getUserID() == theSession.getUser().getUserID()) {
					controller = new HomeController(theSession);
					controller.setPreviousPanel((BasePanel) theFrame.getContentPane());
					controller.setFrame(theFrame);
					panel = new HomePanel((HomeController) controller);
				} else {
					theModel.addUserLinks(user);
					controller = new ProfileController(theSession, user);
					controller.setPreviousPanel((BasePanel) theFrame.getContentPane());
					controller.setFrame(theFrame);
					panel = new ProfilePanel((ProfileController) controller);
				}
				
				theFrame.setContentPane(panel);
				theFrame.pack();
			}
		}
		
		//isAuthor - checks if the selected document was created by the active user.
		
		public boolean isAuthor(Document doc) {
			if(doc.getAuthor().getUserID() == theSession.getUser().getUserID()) {
				return true;
			} else {
				return false;
			}
		}
		
		public void viewItem(int index) {
			
		}
		
		//setIsProfile - sets whether the current list is users or documents.
		
		public void setIsProfile(boolean type) {
			isProfile = type;
		}
		
		//search - Updates the results of this search controller and panel with a new query.
		
		public void search(String query) {
			theQuery = query;
			((SearchPanel) theFrame.getContentPane()).setupData();
		}
		
}

